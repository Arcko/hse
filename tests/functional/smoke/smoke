#!/bin/bash

# Be strict.  Write scripts accordingly.
set -u
set -o pipefail

CMD=${0##*/}

export VERBOSE=1

# set for each test
export TEST_SCRIPT_DIR=  # directory of test script
export TEST=             # name of test
export LOG_TOPDIR=       # all logs live under the top dir
export LOG_DIR=          # each test has its own log dir
export LOG=              # log file for current "cmd"


# local vars (not exported to scripts)
exported_functions=()
smoke_dir=$(readlink -m "${BASH_SOURCE[0]}"/..) || err "readlink"
smoke_test_dir=$smoke_dir/tests
kvdb_home=


test_script_options=
test_list=()
test_args=()
show_test_names=1
stop_on_test_fail=0
keep_kvdb=0
test_fail_count=0

exported_functions+=(err)

err () {
    {
        echo "*** ERROR ***"
        while (( $# > 0 )); do
            echo "$1"
            shift
        done
    } 1>&2
    exit 1
}

syntax () {
    {
        while (( $# > 0 )); do
            echo "$1"
            shift
        done
        echo "Use -h or -hv for help"
    } 1>&2
    exit 1
}

file_search () {
    local f=$1; shift
    local d

    for d in "$@"; do
        if [[ "$d" == "." || "$d" == "" ]]; then
            if [[ -f "$f" ]]; then
                echo "$f"
                return
            fi
        elif [[ -f "$d/$f" ]]; then
            echo "$d/$f"
            return
        fi
    done
}

get_tests () {
    ls "$smoke_test_dir" | grep -Pv '^(group|disabled)' | grep -v '~$'
}

get_group_tests () {
    echo "$1" | grep -q ^group || err "Invalid group: $1"
    [[ -f "$smoke_test_dir/$1" ]] || err "Invalid group: $1"
    sed -e 's/#.*//' "$smoke_test_dir/$1"
}

get_groups () {
    ls "$smoke_test_dir" | grep '^group' | grep -v '~$'
}

get_doc () {
    sed -nre 's/#doc:\s*//p' "$smoke_test_dir/$1" || err "Invalid test: $1"
}

get_test_script () {
    local t=$1; shift
    local search=("$smoke_test_dir" "$@")

    local f=$(file_search "$t" "${search[@]}")
    if [[ "$f" == "" ]]; then
        err "Invalid test: \"$t\"" \
            "Search path: ${search[@]}"
    fi
    echo "$f"
}

check_environment() {
    for executable in hse1 kmt ex1_create; do
        type -p $executable &>/dev/null ||
            err "Cannot find $executable in PATH"
    done
    hse1 -h &> /dev/null ||
        err "Cannot execute HSE CLI: hse1"
}

check_tests () {
    local g
    local t
    # verify each test mentioned in a group is valid
    local GRPS=$(get_groups) || exit 1
    for g in $GRPS; do
        local GRPTESTS=$(get_group_tests "$g") || exit 1
        for t in $GRPTESTS; do
            (get_test_script "$t" >& /dev/null) ||
                err "Group $g contains a non-existent test: $t"
        done
    done
}

exported_functions+=(destroy_all_kvs)
destroy_all_kvs () {
    hse1 -C "$mp" kvdb list -v \
        | awk '($1=="kvslist:") {look=1} (look && $1 == "-") {print($2)}' \
        | while read name; do
        hse1 -C "$mp" kvs destroy "$name" >/dev/null
    done
}

exported_functions+=(counter_reset)
counter_reset () {
    local f="$LOG_DIR/.counter.$1"
    echo 0 >> "$f"
}

exported_functions+=(counter_increment)
counter_increment () {
    local f="$LOG_DIR/.counter.$1"
    local count=$(cat "$f")
    (( count++ ))
    echo "$count" > "$f"
    echo "$count"
}

exported_functions+=(cmd)
cmd () {
    local more=1
    local check_status=1  # 0=ignore, 1=expect success, 2=expect error
    local check_signal=0
    local allow_stdout_noise=1
    local status
    while (( more && $# > 0 )); do
        case "$1" in
            (-i) # ignore status
                check_status=0;
                shift 1;;
            (--exp-err-status)  # expect error status
                check_status=2;
                shift 1;;
            (-s) # expect death by signal
                check_signal=$2
                check_signal=$((check_signal + 128))
                check_status=2;
                shift 2;;
            (-q) allow_stdout_noise=0; shift;;
            (-*) err "Unknown option: cmd $1";;
            (*)  more=0;;
        esac
    done

    local cmd_count=$(counter_increment cmd)
    local log_base=$LOG_DIR/cmd$(printf "%03d" $cmd_count)

    # This lets test scripts see logs from previous command
    LOG=$log_base.log
    LOG_ERR=$log_base.err

    echo "$@" > $log_base.cmd

    if (( allow_stdout_noise && VERBOSE > 1)); then
        # VERBOSE > 1 : user sees command line
        echo "#CMD: $@"
    fi
    if (( allow_stdout_noise && VERBOSE > 2 )); then
        # VERBOSE > 2 : user sees stdout/stderr
        "$@" 2>"$LOG_ERR" | tee "$LOG"
        cat "$LOG_ERR"
        status=${PIPESTATUS[0]}
    else
        "$@" >"$LOG" 2>"$LOG_ERR"
        status=$?
    fi

    echo "$status" > $log_base.status

    case "$check_status" in
        (0) ;; # ignore status
        (1) # expect success
            (( $status == 0 )) ||
                err "Command failed with status $status." \
                    "Command:  $*" \
                    "Log file: $LOG"
            ;;
        (*) # expect error status
            (( $status != 0 )) ||
                err "Expected command to fail, but it exited with status 0" \
                    "Command:  $*" \
                    "Log file: $LOG"
            ;;
    esac

    # Death by signal causes failure unless explicitly ignored.
    # special case: ignore 255 b/c many programs use exit(-1) which
    # maps to a return status of 255.
    if (( status >= 128 && status != 255 && status != check_signal )); then
        err "Command terminated by signal $((status-128))" \
            "Command: $*" \
            "Log file: $LOG"
    fi
    true
}

exported_functions+=(new_kvs)
new_kvs () {

    if (( $# < 1 )); then
	err "new_kvs takes kvdb_home name as arg"
    fi

    local mp=$1
    shift

    # reset counters
    local kvs_count=$(counter_increment kvs)
    local kvs_name=smoke$kvs_count
    cmd -q hse1 -C "$mp" kvs create "$kvs_name" "$@"
    echo "$kvs_name"
}

run_one_test () {

    local test_num=$1; shift
    local total_tests=$1; shift
    local script=$1; shift

    TEST=${script##*/}
    TEST_SCRIPT_DIR=$(dirname $(readlink -m "$script"))

    LOG_DIR=$LOG_TOPDIR/$TEST

    # recreate LOG_DIR
    rm -fr "$LOG_DIR"
    [[ -d "$LOG_DIR" ]] && err "Cannot remove old log directory: $LOG_DIR"
    mkdir -p "$LOG_DIR" || err "Cannot create log directory: $LOG_DIR"
    touch "$LOG_DIR"/stat.start

    # destroy and recreate KVDB
    hse1 -C "$kvdb_home" kvdb destroy || true
    hse1 -C "$kvdb_home" kvdb create ||
        err "Cannot create KVDB" \
            "Command: hse1 -C $kvdb_home kvdb create"

    local test_argc=${#test_args[@]}

    # announce test
    if (( VERBOSE )); then
        echo ""
        if (( test_argc > 0 )); then
            echo "#TEST[$((test_num+1))/$total_tests]: $TEST" "${test_args[@]}"
        else
            echo "#TEST[$((test_num+1))/$total_tests]: $TEST"
        fi
        echo "#LOGS: $LOG_DIR/"
    fi

    # reset counters for test script
    counter_reset cmd
    counter_reset kvs

    # set env vars for test script
    export mp=$kvdb_home

    case "$TEST" in
        (aloha|version) true;;
        (*) destroy_all_kvs;;
    esac

    start_sec=$(date +%s)
    start_nsec=$(date +%N)

    if (( test_argc > 0 )); then
        bash -u $test_script_options "$script" "${test_args[@]}"
        local test_failed=$?
    else
        bash -u $test_script_options "$script"
        local test_failed=$?
    fi

    if (( test_failed )); then
        touch $LOG_DIR/stat.failed
        (( test_fail_count++ ))
        if (( stop_on_test_fail )); then
            err "TEST FAILED"
        fi
    fi

    if (( ! keep_kvdb )); then
        destroy_all_kvs
    fi

    if (( ! test_failed )); then
        end_sec=$(date +%s)
        end_nsec=$(date +%N)

        # remove leading 0 from nsec values to ensure bash
        # seeds it as a base 10 number.

        start_nsec=$(echo "$start_nsec" | sed -e s/^0*//)
        [[ -z "$start_nsec" ]] && start_nsec=0

        end_nsec=$(echo "$end_nsec" | sed -e s/^0*//)
        [[ -z "$end_nsec" ]] && end_nsec=0

        (( msecs = (end_sec - start_sec) * 1000 + (end_nsec / 1000000 - start_nsec / 1000000) ))

        duration=$(printf "%d.%03d\n" $((msecs/1000)) $((msecs%1000)))

        if ((VERBOSE)); then
            echo "#TIME: $duration seconds"
        fi

        echo "$duration" > $LOG_DIR/duration
        touch $LOG_DIR/stat.success
    fi
}

show_report () {

    local test_names=()
    local test_results=()
    local test_duration=()

    local possible_names=$(ls "$LOG_TOPDIR" | sort)

    local n=0

    local name
    local result
    local duration

    local n_failed=0
    local n_success=0
    local n_incomplete=0

    local possible_names=$(ls "$LOG_TOPDIR" | sort)


    for name in $possible_names; do
        local d=$LOG_TOPDIR/$name
        if [[ -f "$d/stat.start" ]]; then
            if [[ -f "$d/stat.success" ]]; then
                result="success"
                ((n_success++))
            elif [[ -f "$d/stat.failed" ]]; then
                result="FAIL"
                ((n_failed++))
            else
                result="INCOMPLETE"
                ((n_incomplete++))
            fi
            duration=$(cat "$d/duration" 2>/dev/null || echo "nan")
            test_names+=($name)
            test_results+=($result)
            test_duration+=($duration)
            ((n++))
        fi
    done

    local total_time=$(
        for ((i=0; i<n; i++)); do
            echo "${test_duration[$i]}"
        done | awk -v sum=0 '{sum+=$1} END {print(int(sum))}')

    printf "Tests:\n"
    if (( n > 0 )); then
        for ((i=0; i<n; i++)); do
            printf "    %-20s  %10s  %8.3f\n" \
                   "${test_names[$i]}" \
                   "${test_results[$i]}" \
                   "${test_duration[$i]}"
        done
    fi
    printf "\n"
    printf "Summary:\n"
    printf "  %8u  incomplete tests\n"  $n_incomplete
    printf "  %8u  failed tests\n"  $n_failed
    printf "  %8u  successful tests\n"  $n_success
    printf "  %8u  total tests\n"  $n
    printf "  %8u  total execution time (seconds)\n" $total_time
    printf "\n"
}

show_groups () {
    local g
    for g in $(get_groups); do
        printf "%-20s    ## %s\n" "$g" "$(get_doc "$g")"
    done
}

show_tests () {
    local t
    for t in $(get_tests); do
        printf "%-20s  # %s\n" "$t" "$(get_doc "$t")"
    done
}

show_tests_long () {
    local g
    local t
    for g in $(get_groups); do
        printf "%-20s    ## %s\n" "$g" "$(get_doc "$g")"
        for t in $(get_group_tests "$g"); do
            printf "  %-20s  # %s\n" "$t" "$(get_doc "$t")"
        done
        printf "\n"
    done
}

help ()
{
    echo "$CMD: HSE smoke test tool"
    echo "Usage:"
    echo "  $CMD -m home_dir -d logs [options] [tests...] # run tests"
    echo "  $CMD -r -d logs [options]                # show report"
    echo "  $CMD { -l, -L, -g }                      # show test info"
    echo "Parameters:"
    echo "  -m KVDB_HOME // set kvdb home dir"
    echo "  -d DIR       // override default log directory"
    echo "  -r           // show report from previous run"
    echo "  -l           // list tests"
    echo "  -L           // list tests, more detail"
    echo "  -g           // list groups"
    echo "  -h           // show the help message"
    echo "Options:"
    echo "  -s           // stop on first test failure"
    echo "  -v           // bump verbosity"
    echo "  -V N         // set verbosity (0=quiet, 2=max)"
    echo "  -x           // enable 'set -x' in test scripts (for debugging)"

    if (( VERBOSE <= 1 )); then
        echo "Use -h -v to get more help"
        return
    fi

    echo ""
    echo "Notes:"
    echo "  - Tests can be specified by name, by file or by group."
    echo "  - Some tests are broken, but everything in the 'smoke' group should pass."
    echo ""
    echo "Examples:"
    echo "  # Run all smoke tests"
    echo "  $CMD -m /mnt/hse-test -d logs"
    echo ""
    echo "  # Run putget1 and putget2"
    echo "  $CMD -m /mnt/hse-test -d logs putget1 putget2"
    echo ""
    echo "  # Run all kvt tests using shell glob expansion"
    echo "  $CMD -m /mnt/hse-test -d logs tests/functional/smoke/tests/kvt*"

}


action=test
while getopts ":C:d:ghklLm:m:rsvV:x" option; do
    case "$option" in

        (g) action=show_groups;;
        (h) action=help;;
        (l) action=show_tests;;
        (L) action=show_tests_long;;
        (r) action=show_report;;

        (d) LOG_TOPDIR=$OPTARG;;
        (k) keep_kvdb=1;;
        (m) kvdb_home=$OPTARG;;
        (s) stop_on_test_fail=1;;
        (v) (( VERBOSE++ ));;
        (V) (( VERBOSE=OPTARG )); [[ "$VERBOSE" =~ ^[0-9]+$ ]] || err "Invalid verbosity value: $OPTARG";;
        (x) test_script_options="-x";;

        (\?) err "Invalid option: -$OPTARG";;
        (:)  err "Invalid option: -$OPTARG requires a parameter";;
        (*)  err "Bug in option parsing!";;
    esac
done

shift $((OPTIND-1))
test_list=("$@")

case "$action" in
    (help)
        help
        exit 0
        ;;
    (test)
        [[ -n "$kvdb_home" ]]      || syntax "Missing required parameter: -m <kvdb_home>"
        [[ -n "$LOG_TOPDIR" ]] || sytnax "Missing required parameter: -d <logdir>"
        ;;
    (show_report)
        [[ -n "$LOG_TOPDIR" ]] || sytnax "Missing required parameter: -d <logdir>"
        [[ -d "$LOG_TOPDIR" ]] || sytnax "No such log dir: $LOG_TOPDIR"
        show_report
        exit 0
        ;;
    (show_tests)
        show_tests
        exit 0
        ;;
    (show_tests_long)
        show_tests_long
        exit 0
        ;;
    (show_groups)
        show_groups
        exit 0;
        ;;
    (*)
        err "Bug in smoke script: action not handled"
        ;;
esac


# All the "show" and "help" paths have exited.
# At this point we are running tests.

check_environment
check_tests

# Export shell functions to test scripts
for fn in "${exported_functions[@]}"; do
    export -f "$fn"
done

# Stupid bash treats an empty array as an unset var, so turn off -u
# to check test_list, then re-enable
set +u
if (( "${#test_list[@]}" == 0 )); then
    test_list=(group.smoke)
fi
set -u

# Convert test_list into script_list
script_list=()
for arg in "${test_list[@]}"; do

    match=0
    spath=()
    test_file=

    if [[ -f "$arg" || -h "$arg" ]]; then
        # path to test script given on command line
        test_file=$arg
        case "$arg" in
            (*/*)  spath=($(dirname $arg) $smoke_test_dir);;
            (*)    spath=($smoke_test_dir);;
        esac
    elif [[ -f "$smoke_test_dir/$arg" || -h "$smoke_test_dir/$arg" ]]; then
        # test scripts exists in standard smoke test dir
        test_file=$smoke_test_dir/$arg
        spath=($(dirname $arg))
    else
        err "No such test: $arg"
    fi

    if echo "$test_file" | grep -Pq '(^group|/group)\.\w+$'; then
        while read grptest; do
            script=$(get_test_script "$grptest" "${spath[@]}") || exit 1
            script_list+=($script)
        done < <(grep -Pv '(^#)|(^\s*$)' < "$test_file")
    else
        script_list+=($test_file)
    fi
done

# run tests
mkdir -p "$LOG_TOPDIR"

count=${#script_list[@]}
for ((i = 0; i < count; i++)); do
    script=${script_list[$i]}
    run_one_test $i $count "$script"
done

if (( test_fail_count > 0 )); then
    exit 1
fi

exit 0
