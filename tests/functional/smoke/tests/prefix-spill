#!/usr/bin/bash

#doc: use putbin to spill and test get

# add 3 KVSes to the KVDB
kvs0=$(new_kvs $mp) || err
kvs1=$(new_kvs $mp pfx_len=2) || err
kvs2=$(new_kvs $mp pfx_len=3) || err

keys=70000

rparams="kvdb-oparms log_squelch_ns=0"

# usage: scanfor nkeys $log $mp $kvs $opts
scanfor() {
	local nk=$1; shift
	local mp=$1; shift
	local kv=$1; shift
	local o="$@"; shift

	cmd pscan -c $mp $kv $rparams $o

	local n=$(awk '(NR == 2) {print $1}' "$LOG")
	if [[ "$n" != "$nk" ]]; then

            err "scan $kv $o found $n keys, expected $nk"
	fi
}

for kvs in $kvs0 $kvs1 $kvs2; do

	# ingest
	cmd putbin -c $keys $mp $kvs $rparams

        # force spill
	cmd putbin -n 1000 $mp $kvs kvdb-oparms csched_debug_mask=0xffffffff cn_close_wait=1 csched_rspill_params=0x01ff $rparams

        # verify spill occurred
	cmd cn_metrics $mp $kvs
        cmd --exp-err-status grep -P '^n[[:space:]]+0,0,' "$LOG"

        # look for keys
	cmd putbin -V -c $keys $mp $kvs $rparams
	scanfor $keys $mp $kvs ""
	scanfor 256   $mp $kvs -p0x000001
	scanfor 256   $mp $kvs -p0x000002
	scanfor 256   $mp $kvs -p0x000003

	# seek for a key too small for scan
	scanfor 256   $mp $kvs -p0x000001 -s0x00000000
	# "typical" seeks
	scanfor 256   $mp $kvs -p0x000001 -s0x00000100
	scanfor 255   $mp $kvs -p0x000001 -s0x00000101
	scanfor 128   $mp $kvs -p0x000001 -s0x00000180
	scanfor 64    $mp $kvs -p0x000002 -s0x000002c0
	# this should be the last key in a page:
	scanfor 52    $mp $kvs -p0x000002 -s0x000002cc
	# and the first key of a page in the middle:
	scanfor 51    $mp $kvs -p0x000002 -s0x000002cd
	scanfor 1     $mp $kvs -p0x000002 -s0x000002ff
	scanfor 0     $mp $kvs -p0x000002 -s0x00000300
	# and too large of a key
	scanfor 0     $mp $kvs -p0x000002 -s0xffffffff

done
