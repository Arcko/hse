# Copyright (C) 2017-2020 Micron Technology.  All rights reserved.
import os
from glob import glob
from sos.plugins import Plugin, IndependentPlugin


class HeterogeneousMemoryStorageEngine(Plugin, IndependentPlugin):
    """Heterogeneous-memory Storage Engine"""
    packages = ('hse',)
    plugin_name = 'hse'
    version = '@CPACK_PACKAGE_VERSION@-@CPACK_PACKAGE_RELEASE@'

    def setup(self):
        all_logs = self.get_option("all_logs")
        limit = self.get_option("log_size")
        limitbytes = limit*1024*1024

        log_globs = [
            '/var/log/hse.log',
            '/var/log/hse_json.log',
            '/var/log/hse/*',
        ]

        logs = []
        for g in log_globs:
            for f in glob(g):
                if os.path.isfile(f):
                    logs.append(f)

        if all_logs:
            self.add_copy_spec(logs)
        else:
            for log in logs:
                #
                # sizelimit applies to the combined size of all files given
                # to one call of add_copy_spec
                #
                self.add_copy_spec(log, sizelimit=limit)

                if os.path.exists(log) and os.stat(log).st_size > limitbytes:
                    self.add_alert(
                        "The file {log} exceeds sosreport's configured size "
                        "limit of {limit} MiB.  A tailed copy of the file "
                        "will be saved in the sos_strings/hse/ directory".
                        format(log=log, limit=limit)
                    )

        # stderr=True means: redirect stderr to stdout
        kwargs = {'stderr': True}

        self.add_cmd_output([
            'mpool list',
            'mpool list -Y -vv',
            'hse kvdb list',
        ], **kwargs)

        # userspace datasets/KVDBs
        cmds = []
        for path in glob('/var/run/mpool/*/*.sock'):
            cmds.extend([
                (
                    'curl -s --noproxy localhost --unix-socket "{path}" '
                    '"http://localhost/data"'
                ).format(path=path)
            ])
        self.add_cmd_output(cmds, **kwargs)
