#!/usr/bin/perl

# This program generates library dependency graphs for executables and
# libraries, by generating an input file for the 'dot' utility (which
# is part of the graphviz package).
#
# Basic usage:
#
# ./libgraph <program> | dot -Tpng > graph.png
#

# init
$nlibs=0;
$maxrefcount = 0;

# Ask ldd what libraries the <program> depends on
@rawlibs = `ldd $ARGV[0]`;


# Reduce to the library pathname (3rd field)
for ($i=0; $i <= $#rawlibs; $i++) {
    my $lib = get_lib($rawlibs[$i]);
    if ($lib) {
	$libs[$nlibs++] = $lib;  # @libs is all depended-on libraries
	$refcount{"$lib"} = 0;   # %refcount{$lib} will be the inbound edge
	                         # count for each lib
    }
}

# Now re-run ldd on each library, to find out which libs depend on which
foreach $lib (@libs) {
    @deplibs = `ldd $lib`;
    # For each $deplib that this $lib depends on...
    foreach my $deplib (@deplibs) {
	$deplib = get_lib($deplib);
	if ($deplib) {
	    # %libdeps{$lib} is the list of libs that $lib depends on
	    $libdeps{$lib} .= " \"$deplib\" ";
	    $refcount{"$deplib"}++; # count the ref from $lib on $deplib
	    # Keep track of highest refcount...
	    if ($refcount{$deplib} > $maxrefcount) {
		$maxrefcount++;
	    }
	    # keep track of how many libs $lib depends on:
	    $libneeds{$lib}++;
	}
    }
}

# put each libdeps list in { curly brackets }
foreach (keys %libdeps) {
    $libdeps{$_} = "{ $libdeps{$_} }"
}

#
# Sort libraries by their refcounts, so we can generate 'dot' input where
# the low-refcount libs appear first.
#
sub by_refcount {
    $refcount{$a} <=> $refcount{$b}
}
@sorted_libs = sort by_refcount @libs;


#
# Generate output in 'dot' format
#
print "digraph {\n";
print "\trankdir=LR\n";

foreach $lib (@sorted_libs) {
    $ranks[$refcount{$lib}] .= " \"$lib\" ";

    if (defined($libneeds{$lib})) {
	print "\t\"$lib\"\t-> $libdeps{$lib};\n"
    }
}

for ($i = 0; $i < $maxrefcount; $i++) {
    if (defined($ranks[$i])) {
	print "\t{ rank = same; $ranks[$i] }\n";
    }
}
print "}\n";

# sort into ranks by refcount
exit;

#
# ignore_lib()
#
# This function singles out a hard-coded list of libraries to be ignored,
# because they are so common.  Thsi script could be generalized in the future,
# so that the lignore-list is dynamic.  But not now.
#
sub ignore_lib {
    if ($_[0] =~ "/lib64/libdl.so.2") {
	return 1;
    } elsif ($_[0] =~ "/lib64/libc.so.6") {
	return 1;
    } elsif ($_[0] =~ "/lib64/libpthread.so.0") {
	return 1;
    }
    return 0;
}

#
# get_lib()
#
# Parse a library dependency from a line of output from 'ldd'
#
sub get_lib {
    my @fields = split(/\s+/, $_[0]);
    if ($fields[2] != "=>") {
	return 0;
    }
    if (ignore_lib($fields[3])) {
	return 0;
    }
    return $fields[3];
}
